// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Book {
  id                    String        @id @default(cuid())
  title                 String        @default("")
  edition               Int           @default(1)
  author                Author?       @relation("Book_author", fields: [authorId], references: [id])
  authorId              String?       @map("author")
  quantity              Int?          @default(0)
  price                 Int?          @default(0)
  image_filesize        Int?
  image_extension       String?
  image_width           Int?
  image_height          Int?
  image_id              String?
  from_Buy_book         Buy[]         @relation("Buy_book")
  from_Reservation_book Reservation[] @relation("Reservation_book")
  from_Review_book      Review[]      @relation("Review_book")

  @@index([authorId])
}

model User {
  id                    String        @id @default(cuid())
  name                  String        @default("")
  email                 String        @unique @default("")
  password              String
  createdAt             DateTime?     @default(now())
  role                  String?       @default("CLIENT")
  from_Buy_user         Buy[]         @relation("Buy_user")
  from_Reservation_user Reservation[] @relation("Reservation_user")
  from_Review_user      Review[]      @relation("Review_user")
}

model Author {
  id        String @id @default(cuid())
  name      String @default("")
  biography String @default("")
  books     Book[] @relation("Book_author")
}

model Buy {
  id           String    @id @default(cuid())
  book         Book?     @relation("Buy_book", fields: [bookId], references: [id])
  bookId       String?   @map("book")
  user         User?     @relation("Buy_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  quantity     Int?
  price        Int?
  purchaseDate DateTime? @default(now())

  @@index([bookId])
  @@index([userId])
}

model Category {
  id          String @id @default(cuid())
  name        String @default("")
  description String @default("")
}

model Publisher {
  id      String @id @default(cuid())
  name    String @default("")
  address String @default("")
  contact String @default("")
}

model Reservation {
  id              String    @id @default(cuid())
  book            Book?     @relation("Reservation_book", fields: [bookId], references: [id])
  bookId          String?   @map("book")
  user            User?     @relation("Reservation_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  status          String?   @default("PENDING")
  reservationDate DateTime? @default(now())

  @@index([bookId])
  @@index([userId])
}

model Review {
  id      String  @id @default(cuid())
  book    Book?   @relation("Review_book", fields: [bookId], references: [id])
  bookId  String? @map("book")
  user    User?   @relation("Review_user", fields: [userId], references: [id])
  userId  String? @map("user")
  rating  Int?    @default(0)
  comment String  @default("")

  @@index([bookId])
  @@index([userId])
}
