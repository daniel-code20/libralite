# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Book {
  id: ID!
  title: String
  edition: Int
  author: Author
  quantity: Int
  price: Int
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input BookWhereUniqueInput {
  id: ID
}

input BookWhereInput {
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  id: IDFilter
  title: StringFilter
  edition: IntFilter
  author: AuthorWhereInput
  quantity: IntNullableFilter
  price: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BookOrderByInput {
  id: OrderDirection
  title: OrderDirection
  edition: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BookUpdateInput {
  title: String
  edition: Int
  author: AuthorRelateToOneForUpdateInput
  quantity: Int
  price: Int
  image: ImageFieldInput
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BookUpdateArgs {
  where: BookWhereUniqueInput!
  data: BookUpdateInput!
}

input BookCreateInput {
  title: String
  edition: Int
  author: AuthorRelateToOneForCreateInput
  quantity: Int
  price: Int
  image: ImageFieldInput
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  role: String
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  role: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  role: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  role: String
}

type Author {
  id: ID!
  name: String
  biography: String
  books(where: BookWhereInput! = {}, orderBy: [BookOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookWhereUniqueInput): [Book!]
  booksCount(where: BookWhereInput! = {}): Int
}

input AuthorWhereUniqueInput {
  id: ID
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  biography: StringFilter
  books: BookManyRelationFilter
}

input BookManyRelationFilter {
  every: BookWhereInput
  some: BookWhereInput
  none: BookWhereInput
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  biography: OrderDirection
}

input AuthorUpdateInput {
  name: String
  biography: String
  books: BookRelateToManyForUpdateInput
}

input BookRelateToManyForUpdateInput {
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  biography: String
  books: BookRelateToManyForCreateInput
}

input BookRelateToManyForCreateInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

type Buy {
  id: ID!
  book: Book
  user: User
  quantity: Int
  price: Int
  purchaseDate: DateTime
}

input BuyWhereUniqueInput {
  id: ID
}

input BuyWhereInput {
  AND: [BuyWhereInput!]
  OR: [BuyWhereInput!]
  NOT: [BuyWhereInput!]
  id: IDFilter
  book: BookWhereInput
  user: UserWhereInput
  quantity: IntNullableFilter
  price: IntNullableFilter
  purchaseDate: DateTimeNullableFilter
}

input BuyOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
  purchaseDate: OrderDirection
}

input BuyUpdateInput {
  book: BookRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  quantity: Int
  price: Int
  purchaseDate: DateTime
}

input BookRelateToOneForUpdateInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BuyUpdateArgs {
  where: BuyWhereUniqueInput!
  data: BuyUpdateInput!
}

input BuyCreateInput {
  book: BookRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  quantity: Int
  price: Int
  purchaseDate: DateTime
}

input BookRelateToOneForCreateInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  description: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
}

type Publisher {
  id: ID!
  name: String
  address: String
  contact: String
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  contact: StringFilter
}

input PublisherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  contact: OrderDirection
}

input PublisherUpdateInput {
  name: String
  address: String
  contact: String
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  name: String
  address: String
  contact: String
}

type Reservation {
  id: ID!
  book: Book
  user: User
  status: String
  reservationDate: DateTime
}

input ReservationWhereUniqueInput {
  id: ID
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  book: BookWhereInput
  user: UserWhereInput
  status: StringNullableFilter
  reservationDate: DateTimeNullableFilter
}

input ReservationOrderByInput {
  id: OrderDirection
  status: OrderDirection
  reservationDate: OrderDirection
}

input ReservationUpdateInput {
  book: BookRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  status: String
  reservationDate: DateTime
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  book: BookRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  status: String
  reservationDate: DateTime
}

type Review {
  id: ID!
  book: Book
  user: User
  rating: Int
  comment: String
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  book: BookWhereInput
  user: UserWhereInput
  rating: IntNullableFilter
  comment: StringFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  comment: OrderDirection
}

input ReviewUpdateInput {
  book: BookRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  rating: Int
  comment: String
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  book: BookRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  rating: Int
  comment: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBook(data: BookCreateInput!): Book
  createBooks(data: [BookCreateInput!]!): [Book]
  updateBook(where: BookWhereUniqueInput!, data: BookUpdateInput!): Book
  updateBooks(data: [BookUpdateArgs!]!): [Book]
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteBooks(where: [BookWhereUniqueInput!]!): [Book]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createBuy(data: BuyCreateInput!): Buy
  createBuys(data: [BuyCreateInput!]!): [Buy]
  updateBuy(where: BuyWhereUniqueInput!, data: BuyUpdateInput!): Buy
  updateBuys(data: [BuyUpdateArgs!]!): [Buy]
  deleteBuy(where: BuyWhereUniqueInput!): Buy
  deleteBuys(where: [BuyWhereUniqueInput!]!): [Buy]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(where: PublisherWhereUniqueInput!, data: PublisherUpdateInput!): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(where: ReservationWhereUniqueInput!, data: ReservationUpdateInput!): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  books(where: BookWhereInput! = {}, orderBy: [BookOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookWhereUniqueInput): [Book!]
  book(where: BookWhereUniqueInput!): Book
  booksCount(where: BookWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  buys(where: BuyWhereInput! = {}, orderBy: [BuyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuyWhereUniqueInput): [Buy!]
  buy(where: BuyWhereUniqueInput!): Buy
  buysCount(where: BuyWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  publishers(where: PublisherWhereInput! = {}, orderBy: [PublisherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublisherWhereUniqueInput): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  reservations(where: ReservationWhereInput! = {}, orderBy: [ReservationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReservationWhereUniqueInput): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
